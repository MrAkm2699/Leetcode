/********************************************

Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

Example 1:
Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.

Example 2:
Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.

Example 3:
Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.

**********************************************/


/****************************CODE**************gives error only if one value in arraya is INT_MIN*******/
 int thirdMax(vector<int>& nums) {
        int fm=INT_MIN,sm=INT_MIN,ans=INT_MIN;
        int n=nums.size();
        
        for(int i=0;i<n;i++)
        {
            if(fm==nums[i] or sm==nums[i] or ans==nums[i])   
                continue;
            if(nums[i]>fm)
            {
                ans=sm;
                sm=fm;
                fm=nums[i];
            } 
            else if(nums[i]>sm)
            {
                ans=sm;
                sm=nums[i];
            }
            else if(nums[i]>ans)
                ans=nums[i];
        }
        if(ans==INT_MIN)
                return fm;
        return ans;
    }
    
    
    /********************good code using sets**********
    
       int thirdMax(vector<int>& nums) {
     set<int>s;
        for(int i : nums)
        {
            s.insert(i);
            if(s.size()>3)
            {
                s.erase(s.begin());
            }
        }
        if(s.size()==3)
            return *s.begin();
        else
            return *s.rbegin();
    }
    
    ******************************************************/
